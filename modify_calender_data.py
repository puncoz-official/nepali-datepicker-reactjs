import re

# Original bsMonthCalculatedData from the file
original_bsMonthCalculatedData = [
    [0, 1, 1, 22, 1, 3, 1, 1, 1, 3, 1, 22, 1, 3, 1, 3, 1, 22, 1, 3, 1, 19, 1, 3, 1, 1, 3, 1, 2, 2, 1, 3, 1],
    [1, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 3, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 3, 1, 1, 2],
    [0, 1, 2, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 3, 1, 1, 2],
    [1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 2, 2, 1, 3, 1, 2, 2, 2, 1, 2],
    [59, 1, 26, 1, 28, 1, 2, 1, 12],
    [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 1, 1, 2, 2, 1, 3, 1, 2, 1, 2],
    [0, 12, 1, 3, 1, 3, 1, 5, 1, 11, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 27, 1, 2],
    [1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 3, 1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 15, 2, 4],
    [0, 1, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 3, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 15, 2, 4],
    [1, 1, 3, 1, 3, 1, 14, 1, 3, 1, 1, 1, 3, 1, 14, 1, 3, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 3, 1, 14, 1, 3, 15, 1, 2, 1, 1],
    [0, 1, 1, 3, 1, 3, 1, 10, 1, 3, 1, 3, 1, 1, 1, 3, 1, 3, 1, 10, 1, 3, 1, 3, 1, 3, 1, 3, 1, 14, 1, 3, 1, 3, 1, 3, 1, 3, 1, 10, 1, 20, 1, 1, 1],
    [1, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 3, 1, 20, 3],
]

# Create a deep copy for modification
modified_bsMonthCalculatedData = [list(arr) for arr in original_bsMonthCalculatedData]

# 1. Month 2 (Jestha, index 1)
#   Set the element at index 59 to 2 (original was 1).
#   Set the element at index 61 to 0 (original was 1).
if len(modified_bsMonthCalculatedData[1]) > 61:
    modified_bsMonthCalculatedData[1][59] = 2
    modified_bsMonthCalculatedData[1][61] = 0
    modified_bsMonthCalculatedData[1] = [x for x in modified_bsMonthCalculatedData[1] if x != 0]
else:
    print("Error: Array for Month 2 is too short for specified modifications.")

# 2. Month 3 (Asar, index 2)
#   Set the element at index 58 to 2 (original was 1).
#   Set the element at index 60 to 0 (original was 1).
if len(modified_bsMonthCalculatedData[2]) > 60:
    modified_bsMonthCalculatedData[2][58] = 2
    modified_bsMonthCalculatedData[2][60] = 0
    modified_bsMonthCalculatedData[2] = [x for x in modified_bsMonthCalculatedData[2] if x != 0]
else:
    print("Error: Array for Month 3 is too short for specified modifications.")

# 3. Month 8 (Mangsir, index 7)
#   The element at index 56 (original value 2) should become 7.
#   The element at index 57 (original value 15) should become 10.
if len(modified_bsMonthCalculatedData[7]) > 57:
    modified_bsMonthCalculatedData[7][56] = 7
    modified_bsMonthCalculatedData[7][57] = 10
else:
    print("Error: Array for Month 8 is too short for specified modifications.")

# 4. Month 11 (Falgun, index 10)
#   The element at index 40 (original value 1) should become 15.
#   The element at index 41 (original value 20) should become 6.
if len(modified_bsMonthCalculatedData[10]) > 41:
    modified_bsMonthCalculatedData[10][40] = 15
    modified_bsMonthCalculatedData[10][41] = 6
else:
    print("Error: Array for Month 11 is too short for specified modifications.")

# --- Output the final corrected arrays for the four months ---
print("Corrected bsMonthCalculatedData for Month 2 (Jestha):")
print(modified_bsMonthCalculatedData[1])
print("\nCorrected bsMonthCalculatedData for Month 3 (Asar):")
print(modified_bsMonthCalculatedData[2])
print("\nCorrected bsMonthCalculatedData for Month 8 (Mangsir):")
print(modified_bsMonthCalculatedData[7])
print("\nCorrected bsMonthCalculatedData for Month 11 (Falgun):")
print(modified_bsMonthCalculatedData[10])

# --- Generate the string for the new bsMonthCalculatedData ---
# This formatting aims to match the original file's style
new_bsMonthCalculatedData_str = "export const bsMonthCalculatedData = [\n"
for i, month_data in enumerate(modified_bsMonthCalculatedData):
    new_bsMonthCalculatedData_str += "    ["
    if month_data: # Check if month_data is not empty
        # Try to wrap lines nicely, similar to original
        line_len = 0
        for j, val in enumerate(month_data):
            val_str = str(val)
            if line_len + len(val_str) + 2 > 100: # Approx line length limit
                new_bsMonthCalculatedData_str += "\n        "
                line_len = 0
            new_bsMonthCalculatedData_str += val_str
            if j < len(month_data) - 1:
                new_bsMonthCalculatedData_str += ", "
            line_len += len(val_str) + 2
    new_bsMonthCalculatedData_str += "],"
    if i < len(modified_bsMonthCalculatedData) - 1:
        new_bsMonthCalculatedData_str += "\n"
new_bsMonthCalculatedData_str += "\n]\n"

print("\n--- Generated bsMonthCalculatedData string for the file ---")
print(new_bsMonthCalculatedData_str)

# --- Read the original CalenderData.ts file content ---
original_file_content = """export const months = {
    en: [
        "Baisakh",
        "Jestha",
        "Asar",
        "Shrawan",
        "Bhadra",
        "Asoj",
        "Kartik",
        "Mangsir",
        "Pouse",
        "Magh",
        "Falgun",
        "Chaitra",
    ],
    ne: ["बैशाख", "जेठ", "असार", "सावन", "भदौ", "असोज", "कार्तिक", "मंसिर", "पौष", "माघ", "फागुन", "चैत"],
}

export const weeks = {
    en: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    ne: ["आईत", "सोम", "मंगल", "बुध", "बिही", "शुक्र", "शनि"],
}

export const maxBSYear = 2100
export const minBSYear = 1970

export const bsMonthMaxDays = [
    [30, 31],
    [31, 32],
    [31, 32],
    [31, 32],
    [31, 32],
    [30, 31],
    [29, 30],
    [29, 30],
    [29, 30],
    [29, 30],
    [29, 30],
    [30, 31],
]

export const bsMonthCalculatedData = [
    [0, 1, 1, 22, 1, 3, 1, 1, 1, 3, 1, 22, 1, 3, 1, 3, 1, 22, 1, 3, 1, 19, 1, 3, 1, 1, 3, 1, 2, 2, 1, 3, 1],
    [
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        3,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        1,
        2,
    ],
    [
        0,
        1,
        2,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        1,
        2,
    ],
    [
        1,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        2,
        2,
        1,
        3,
        1,
        2,
        2,
        2,
        1,
        2,
    ],
    [59, 1, 26, 1, 28, 1, 2, 1, 12],
    [
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        5,
        1,
        1,
        2,
        2,
        1,
        3,
        1,
        2,
        1,
        2,
    ],
    [0, 12, 1, 3, 1, 3, 1, 5, 1, 11, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 27, 1, 2],
    [
        1,
        2,
        2,
        2,
        2,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        1,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        2,
        2,
        2,
        15,
        2,
        4,
    ],
    [
        0,
        1,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        3,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        15,
        2,
        4,
    ],
    [
        1,
        1,
        3,
        1,
        3,
        1,
        14,
        1,
        3,
        1,
        1,
        1,
        3,
        1,
        14,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        18,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        14,
        1,
        3,
        15,
        1,
        2,
        1,
        1,
    ],
    [
        0,
        1,
        1,
        3,
        1,
        3,
        1,
        10,
        1,
        3,
        1,
        3,
        1,
        1,
        1,
        3,
        1,
        3,
        1,
        10,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        14,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        10,
        1,
        20,
        1,
        1,
        1,
    ],
    [
        1,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        3,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        20,
        3,
    ],
]
"""

# Replace the old bsMonthCalculatedData with the new one
# Using regex to find the block, from "export const bsMonthCalculatedData = [" to the closing "];"
# This needs to be robust to handle the content within the array.
# A simpler way for this specific structure: find the start and end markers.
start_marker = "export const bsMonthCalculatedData = ["
end_marker = "]\n]" # This marks the end of the last array item and the main array.
                   # It might need adjustment if the file structure is different.

# A more robust way for the end marker if the array is the last thing or followed by specific known content
# For now, let's find the start of bsMonthCalculatedData and the end of its definition
# which is the last '];' in the context of this variable.

try:
    start_index = original_file_content.find(start_marker)
    if start_index == -1:
        print("Error: Could not find the start of bsMonthCalculatedData in the file content.")
        final_content = "Error occurred"
    else:
        # Find the end of the bsMonthCalculatedData block.
        # This is heuristic: find the matching ']' for the opening '[' of the main array.
        # We need to count brackets to do this properly, or find a unique pattern after it.
        # Given the file structure, it ends with '],\n]' if it's not the last element,
        # or ']\n];' if it's followed by more code, or ']\n]' if it's the last one.
        # The provided string has it as the last meaningful export.

        # Let's find the end by searching for the pattern that signifies the end of this array literal
        # This is a bit fragile. A proper JS parser would be best.
        # For this specific file, it ends with '],\n]' and then nothing else or comments.
        # The script will output the string `new_bsMonthCalculatedData_str` which includes the trailing `]`

        # Find where the bsMonthCalculatedData array definition ends
        # It starts with "export const bsMonthCalculatedData = ["
        # and ends with the corresponding closing bracket and semicolon if applicable.
        # The current script's new_bsMonthCalculatedData_str ends with "]\n]"

        # A simple regex to find the whole block.
        # It looks for "export const bsMonthCalculatedData = [" up to the next "];"
        # that is not inside a sub-array's numbers. This is hard with regex.
        # A simpler substitution: replace from start_marker to the *specific known end* of the original data block.

        original_bs_data_end_index = -1
        # We need to find the correct closing ']' for the main array.
        # The original data has a specific structure.
        # Let's find the '];' that follows 'export const bsMonthCalculatedData = ['

        # This is the original data as a string to help find its end accurately
        original_data_str_snippet = """export const bsMonthCalculatedData = [
    [0, 1, 1, 22, 1, 3, 1, 1, 1, 3, 1, 22, 1, 3, 1, 3, 1, 22, 1, 3, 1, 19, 1, 3, 1, 1, 3, 1, 2, 2, 1, 3, 1],
    [
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        3,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        1,
        2,
    ],
    [
        0,
        1,
        2,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        1,
        2,
    ],
    [
        1,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        2,
        2,
        1,
        3,
        1,
        2,
        2,
        2,
        1,
        2,
    ],
    [59, 1, 26, 1, 28, 1, 2, 1, 12],
    [
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        5,
        1,
        1,
        2,
        2,
        1,
        3,
        1,
        2,
        1,
        2,
    ],
    [0, 12, 1, 3, 1, 3, 1, 5, 1, 11, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 18, 1, 3, 1, 3, 1, 27, 1, 2],
    [
        1,
        2,
        2,
        2,
        2,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        1,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        2,
        2,
        2,
        15,
        2,
        4,
    ],
    [
        0,
        1,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        3,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        15,
        2,
        4,
    ],
    [
        1,
        1,
        3,
        1,
        3,
        1,
        14,
        1,
        3,
        1,
        1,
        1,
        3,
        1,
        14,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        18,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        14,
        1,
        3,
        15,
        1,
        2,
        1,
        1,
    ],
    [
        0,
        1,
        1,
        3,
        1,
        3,
        1,
        10,
        1,
        3,
        1,
        3,
        1,
        1,
        1,
        3,
        1,
        3,
        1,
        10,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        14,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        10,
        1,
        20,
        1,
        1,
        1,
    ],
    [
        1,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        3,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        3,
        1,
        3,
        1,
        20,
        3,
    ],
]"""
        # Find the end of this specific string in the larger original_file_content
        # This is hacky. The last few characters are '    ],\n]'
        end_marker_in_original = "    ],\n]" # Marks the end of the last sub-array and the main array.

        temp_end_index = original_file_content.rfind(end_marker_in_original, start_index)
        if temp_end_index == -1 :
             print("Error: Could not robustly find the end of bsMonthCalculatedData in the file content.")
             final_content = "Error occurred in finding end"
        else:
            original_bs_data_end_index = temp_end_index + len(end_marker_in_original)
            # Ensure we capture the final ']' of the main array.
            # The new string replaces everything from "export const bsMonthCalculatedData = [" up to and including its closing "]".

            prefix = original_file_content[:start_index]
            suffix = original_file_content[original_bs_data_end_index:] # Content after the bsMonthCalculatedData block

            final_content = prefix + new_bsMonthCalculatedData_str.strip() + suffix

except Exception as e:
    print(f"An error occurred: {e}")
    final_content = f"Error during script execution: {e}"

print("\n--- Full modified file content (CalenderData.ts) ---")
print(final_content)

# Re-check lengths for safety before printing specific arrays if errors occurred during modification
print("\n--- Final Check of Corrected Arrays ---")
if len(modified_bsMonthCalculatedData[1]) > 0 : # Basic check
    print("Month 2 (Jestha) final:")
    print(modified_bsMonthCalculatedData[1])
if len(modified_bsMonthCalculatedData[2]) > 0 :
    print("Month 3 (Asar) final:")
    print(modified_bsMonthCalculatedData[2])
if len(modified_bsMonthCalculatedData[7]) > 0 :
    print("Month 8 (Mangsir) final:")
    print(modified_bsMonthCalculatedData[7])
if len(modified_bsMonthCalculatedData[10]) > 0 :
    print("Month 11 (Falgun) final:")
    print(modified_bsMonthCalculatedData[10])

print("\nModification script finished.")
